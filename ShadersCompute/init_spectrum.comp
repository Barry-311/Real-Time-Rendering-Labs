#version 430 core
layout(local_size_x=16, local_size_y=16) in;

layout(rg32f, binding=0) uniform image2D uSpectrum0;

uniform float uPhillipsA;
uniform float uDomainSize;
uniform vec2  uWindDir;
uniform int   uMode; // 0 => (u), 1 => (v), 2 => (h)

// Simplified Phillips
float phillipsSpectrum(float kx, float ky)
{
    float L=200.0;
    float damping=0.001;
    float k2= kx*kx + ky*ky;
    if(k2<1e-8) return 0.0;

    float kw= (kx*uWindDir.x + ky*uWindDir.y)/ sqrt(k2);
    float E= uPhillipsA* exp(-1.0/(k2*L*L)) / (k2*k2)* (kw*kw);
    E*= exp(-k2*damping*damping);
    return E;
}

float randVal(uvec2 seed)
{
    uint n= seed.x*1973u + seed.y*9277u + 12345u;
    float rf= float(n%10000u)/10000.0;
    return fract(sin(rf*12.9898)*43758.5453);
}

void main()
{
    ivec2 gid= ivec2(gl_GlobalInvocationID.xy);
    ivec2 sz= imageSize(uSpectrum0);
    if(gid.x>=sz.x||gid.y>=sz.y) return;

    int Nx= sz.x;
    int halfX= Nx/2;
    int halfY= sz.y/2;
    int i= gid.x- halfX;
    int j= gid.y- halfY;

    float dk= 2.0*3.14159265359 / uDomainSize;
    float kx= float(i)*dk;
    float ky= float(j)*dk;

    float P= phillipsSpectrum(kx,ky);

    float r1= randVal(uvec2(gid.xy + 123u));
    float r2= randVal(uvec2(gid.xy + 999u));
    float amplitude= sqrt(P*0.5);

    float re= amplitude*(r1*2.0 -1.0);
    float im= amplitude*(r2*2.0 -1.0);

    imageStore(uSpectrum0, gid, vec4(re,im,0,0));
}
