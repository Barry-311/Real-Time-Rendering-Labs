#version 430 core
layout(local_size_x = 16, local_size_y = 16) in;

layout(rg32f, binding = 0) readonly  uniform image2D spectrumU;

// Output (u_x)=(i*kx*u) and (u_y)=(i*ky*u)
layout(rg32f, binding = 1) writeonly uniform image2D spectrumU_x;
layout(rg32f, binding = 2) writeonly uniform image2D spectrumU_y;

uniform float domainSize;

void main()
{
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    ivec2 sz = imageSize(spectrumU);
    if (gid.x >= sz.x || gid.y >= sz.y) return;

    // u => reU + i * imU
    vec4 c = imageLoad(spectrumU, gid);
    float reU = c.r;
    float imU = c.g;

    // Calculate kx, ky
    int Nx = sz.x;
    int halfX = Nx / 2;
    int halfY = sz.y / 2;
    int i = gid.x - halfX;
    int j = gid.y - halfY;

    float dk = 2.0 * 3.14159265359 / domainSize;
    float kx = float(i) * dk;
    float ky = float(j) * dk;

    // u_x = i*kx * (reU + i*imU)
    // i*(re + i*im) = ( -im, re )
    // => re(u_x) = -kx * imU, im(u_x) =  kx * reU
    float reU_x = -kx * imU;
    float imU_x = kx * reU;

    // u_y = i*ky * (reU + i*imU)
    float reU_y = -ky * imU;
    float imU_y = ky * reU;

    imageStore(spectrumU_x, gid, vec4(reU_x, imU_x, 0, 0));
    imageStore(spectrumU_y, gid, vec4(reU_y, imU_y, 0, 0));
}
