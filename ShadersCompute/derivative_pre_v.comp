#version 430 core
layout(local_size_x = 16, local_size_y = 16) in;

layout(rg32f, binding = 0) readonly  uniform image2D spectrumV;

// Output (v_x)=(i*kx*v) and (v_y)=(i*ky*v)
layout(rg32f, binding = 1) writeonly uniform image2D spectrumV_x;
layout(rg32f, binding = 2) writeonly uniform image2D spectrumV_y;

uniform float domainSize;

void main()
{
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    ivec2 sz = imageSize(spectrumV);
    if (gid.x >= sz.x || gid.y >= sz.y) return;

    // v => reV + i*imV
    vec4 c = imageLoad(spectrumV, gid);
    float reV = c.r;
    float imV = c.g;

    int Nx = sz.x;
    int halfX = Nx / 2;
    int halfY = sz.y / 2;
    int i = gid.x - halfX;
    int j = gid.y - halfY;

    float dk = 2.0 * 3.14159265359 / domainSize;
    float kx = float(i) * dk;
    float ky = float(j) * dk;

    // i*kx*(reV + i*imV)
    float reV_x = -kx * imV;
    float imV_x = kx * reV;

    // i*ky*(reV + i*imV)
    float reV_y = -ky * imV;
    float imV_y = ky * reV;

    imageStore(spectrumV_x, gid, vec4(reV_x, imV_x, 0, 0));
    imageStore(spectrumV_y, gid, vec4(reV_y, imV_y, 0, 0));
}
